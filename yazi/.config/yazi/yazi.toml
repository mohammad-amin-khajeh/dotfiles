# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [ 1, 3, 3 ]
sort_by        = "mtime"
sort_sensitive = false
sort_reverse   = true
sort_dir_first = true
linemode       = "size_and_mtime"
show_hidden    = true
show_symlink   = true
scrolloff      = 5

[preview]
tab_size        = 2
max_width       = 900
max_height      = 900
cache_dir       = "~/.cache/yazi"
image_delay     = 0
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
	{ run = 'code "%*"',    orphan = true, desc = "code",         for = "windows" },
	{ run = 'code -w "%*"', block = true,  desc = "code (block)", for = "windows" },
]
open = [
	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]
open_image = [
	{ run = 'o "$@"',                       desc = "Open", for = "linux" },
]
open_document = [
	{ run = 'zathura "$@"',                 desc = "Open", for = "linux" },
]
reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',            desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                          desc = "Reveal", for = "macos" },
	{ run = 'explorer /select, "%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'ouch d -y "%*"', desc = "Extract here with ouch", for = "windows" },
	{ run = 'ouch d -y "$@"', desc = "Extract here with ouch", for = "unix" },
]
play = [
	{ run = 'mpv --player-operation-mode=pseudo-gui "$@"', orphan = true, for = "unix" },
	{ run = 'mpv --player-operation-mode=pseudo-gui "%1"', orphan = true, for = "windows" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
	{ mime = "text/*",                       use = [ "edit", "reveal" ] },
	{ mime = "image/*{!djvu}",               use = [ "open_image", "reveal" ] },
	{ mime = "{audio,video}/*",              use = [ "play", "reveal" ] },
	{ mime = "application/octet-stream",     use = [ "edit", "reveal" ] },
	{ name = "*/",                           use = [ "edit", "open", "reveal" ] },

	{ mime = "application/pdf",         use = [ "open_document", "reveal" ] },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },
	{ mime = "application/{!epub}*zip", use = [ "extract", "reveal" ] },
	{ mime = "application/*rar",        use = [ "extract", "reveal" ] },
	{ mime = "application/zstd",        use = [ "extract", "reveal" ] },

	{ mime = "application/json",        use = [ "edit", "reveal" ] },
	{ mime = "*/javascript",            use = [ "edit", "reveal" ] },
	{ mime = "*",                       use = [ "open", "reveal" ] },
]

[plugin]
prepend_previewers = [
    # audio metadata
    { mime = "audio/*",   run = "exifaudio"},

    # Archive previewer
	  { mime = "application/*zip",            run = "ouch" },
	  { mime = "application/java-archive",    run = "ouch" },
	  { mime = "application/vnd.rar",         run = "ouch" },
	  { mime = "application/x-7z-compressed", run = "ouch" },
	  { mime = "application/x-bzip2",         run = "ouch" },
	  { mime = "application/x-rar",           run = "ouch" },
	  { mime = "application/x-tar",           run = "ouch" },
	  { mime = "application/x-zstd",          run = "ouch" },
	  { mime = "application/xz",              run = "ouch" },

    # other previewers
    { name = "*.tar*", run = 'piper --format=url -- tar tf "$1"'},
    { name = "*.csv",  run = 'piper -- bat -p --color=always "$1"'},
    { name = "*.md",   run = 'piper -- CLICOLOR_FORCE=1 glow -w=$w -s=dark "$1"'},

    # Fallback
    { mime = "application/octet-stream",    run = "code" },
]

[[plugin.prepend_fetchers]]
id   = "mime"
if   = "!(mime|dummy)"
name = "*"
run  = "mime-ext"
prio = "high"

[[plugin.prepend_fetchers]]
id   = "git"
name = "*"
run  = "git"

[[plugin.prepend_fetchers]]
id   = "git"
name = "*/"
run  = "git"
