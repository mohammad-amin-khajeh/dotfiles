# basic settings
set icons
set ignorecase
set hidden
set sortby time
set reverse
set sixel
# set drawbox
set info 'size:time'
set ratios 1:3:3

# previewer
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-euy'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 8

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <c-enter> shell
map <enter> open

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
	case $(echo "$f") in
		*cue) mpv $f;;
	esac
	
	[[ "echo $f" == *cue ]] ||
	
    case $(file --mime-type -Lb $f) in
        application/pdf) zathura $f;;
        text/*|*json) lf -remote "send $id \$$EDITOR \$fx";;
        image/*) o $f;;
        audio/*) mpv --player-operation-mode=pseudo-gui $f;;
        video/*) mpv --player-operation-mode=pseudo-gui $f;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd conf-up ${{
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[Y/n]"
    read ans
	case "$ans" in
	'[yY]'|'' ) rm -rf $fx
	esac
}}

# use '<delete>' key for either 'trash' or 'delete' command
map D delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar.zst) tar xvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
	printf "enter the archive's name: "
	read name
    mkdir "$name"
    cp -rp $fx "$name"
    tar czf "$name.tar.gz" "$name"
    rm -rf "$name"
}}

# compress current file or selected files with 7zip
cmd 7z ${{
    set -f
	printf "enter the archive's name: "
	read name
    mkdir "$name"
    cp -rp $fx "$name"
    7z a "$name.7z" -mx=9 "$name"
    rm -rf "$name"
  }}

# compress current file or selected files with zip
cmd zip ${{
    set -f
	printf "enter the archive's name: "
	read name
    mkdir "$name"
    cp -rp $fx "$name"
    zip -r9 "$name.zip" "$name"
    rm -rf "$name"
}}

cmd cpf ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

	echo "file://$(realpath "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done | xclip -i -sel c -t text/uri-list
}}

# setlocal /mnt/d/anime/ sortby natural
# setlocal /mnt/d/anime/ noreverse
# setlocal /mnt/e/manga/ sortby natural
# setlocal /mnt/e/manga/ noreverse
# setlocal /home/mmd/Pictures/wallpapers/ sortby atime
setlocal /home/mmd/Music/piano\ ghibli sortby natural
setlocal /home/mmd/Music/piano\ ghibli noreverse


cmd mkdir ${{
  set -f
  printf "Directory Name: "
  read ans
  mkdir -p "$ans"
}}

cmd wal ${{
	wallpaper.sh "$f"
}}

map m
map a
map <c-c> cpf
map ga cd ~/Documents/harddrive/anime
map gb cd ~/Pictures/screenshots
map gcc cd ~/Documents/code
map gcb cd ~/Documents/books/
map gco cd ~/.config
map gcp cd ~/Pictures/Code
map gdd cd ~/Downloads
map gdf cd ~/Documents
map gf cd ~/Documents/flash
map ge cd ~/Documents/harddrive
map gh cd ~
map gl cd ~/.local
map gm cd ~/Music
map gp cd ~/Documents/phone
map gv cd ~/Videos
map gw cd ~/Pictures/wallpapers
map gy cd ~/Videos/youtube
map gs cd ~/Videos/screencaps
map gt cd ~/Downloads/Telegram\ Desktop
map md :push %mkdir<space>
map R reload
map e extract
map at tar
map az zip
map a7 7z
map sw wal
